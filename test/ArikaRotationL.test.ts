import { expect } from "chai";
import { describe, beforeEach, test } from "vitest";
import { Board } from "../src/Board";
import { Tetromino } from "../src/Tetromino";
import { setupFallingShape } from "./testUtils";

describe("Arika L respects the center column rule and ", () => {
    describe("will not rotate when shape position (0,1) is occupied ", () => {
        let board: Board;

        beforeEach(() => {
            board = Board.fromString(
                `
                    ....Z.....
                    ..........
                    ..........
                    ..........
                    ..........
                    ..........
                    `
            );
        });

        test("when L is in initial rotation and rotating left", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L, 0, 3);

            const expected = `
                ....Z.....
                ...LLL....
                ...L......
                ..........
                ..........
                ..........
                `;

            expect(board.toString()).to.equalShape(expected);

            board.rotateLeft();
            board.rotateLeft();

            expect(board.toString()).to.equalShape(expected);
        });

        test("when L is in initial rotation and rotating right", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L, 0, 3);

            const expected = `
                    ....Z.....
                    ...LLL....
                    ...L......
                    ..........
                    ..........
                    ..........
                    `;

            expect(board.toString()).to.equalShape(expected);

            board.rotateRight();
            board.rotateRight();

            expect(board.toString()).to.equalShape(expected);
        });

        test("when L is rotated 180 and rotating left", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L.rotateLeft().rotateLeft(), 0, 3);

            const expected = `
                    ....Z.....
                    .....L....
                    ...LLL....
                    ..........
                    ..........
                    ..........
                    `;

            expect(board.toString()).to.equalShape(expected);

            board.rotateLeft();
            board.rotateLeft();

            expect(board.toString()).to.equalShape(expected);
        });

        test("when L is rotated 180 and rotating right", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L.rotateLeft().rotateLeft(), 0, 3);

            const expected = `
                    ....Z.....
                    .....L....
                    ...LLL....
                    ..........
                    ..........
                    ..........
                    `;

            expect(board.toString()).to.equalShape(expected);

            board.rotateRight();
            board.rotateRight();

            expect(board.toString()).to.equalShape(expected);
        });
    });

    describe("will not rotate when shape position (1,1) is occupied ", () => {
        let board: Board;
        beforeEach(() => {
            board = Board.fromString(
                `
                        ..........
                        ....Z.....
                        ..........
                        ..........
                        ..........
                        ..........
                        `
            );
        });
        test("when L is rotated 180 and rotating left", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L.rotateLeft().rotateLeft(), 0, 3);
            const expected = `
                    ..........
                    ....ZL....
                    ...LLL....
                    ..........
                    ..........
                    ..........
                    `;
            expect(board.toString()).to.equalShape(expected);
            board.rotateLeft();
            board.rotateLeft();
            expect(board.toString()).to.equalShape(expected);
        });
        test("when L is rotated 180 and rotating right", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L.rotateLeft().rotateLeft(), 0, 3);
            const expected = `
                    ..........
                    ....ZL....
                    ...LLL....
                    ..........
                    ..........
                    ..........
                    `;
            expect(board.toString()).to.equalShape(expected);
            board.rotateRight();
            board.rotateRight();
            expect(board.toString()).to.equalShape(expected);
        });
    });
    describe("will not rotate when shape position (2,1) is occupied ", () => {
        let board: Board;
        beforeEach(() => {
            board = Board.fromString(
                `
                    ..........
                    ..........
                    ....Z.....
                    ..........
                    ..........
                    ..........
                    `
            );
        });
        test("when L is in initial rotation and rotating left", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L, 0, 3);
            const expected = `
                ..........
                ...LLL....
                ...LZ.....
                ..........
                ..........
                ..........
                `;
            expect(board.toString()).to.equalShape(expected);
            board.rotateLeft();
            board.rotateLeft();
            expect(board.toString()).to.equalShape(expected);
        });
        test("when L is in initial rotation and rotating right", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L, 0, 3);
            const expected = `
                ..........
                ...LLL....
                ...LZ.....
                ..........
                ..........
                ..........
                `;
            expect(board.toString()).to.equalShape(expected);
            board.rotateRight();
            board.rotateRight();
            expect(board.toString()).to.equalShape(expected);
        });
    });
    describe("column rule special cases and", () => {
        test("will rotate right when (0,0) and (2,1) are occupied", () => {
            let board = Board.fromString(
                `
            ...Z......
            ..........
            ....Z.....
            ..........
            ..........
            ..........
            `
            );
            board = setupFallingShape(board, Tetromino.ARIKA_L, 0, 3);

            expect(board.toString(), "Incorrect setup").to.equalShape(
                `
            ...Z......
            ...LLL....
            ...LZ.....
            ..........
            ..........
            ..........
            `
            );

            board.rotateRight();

            expect(board.toString(), "Rotation failed").to.equalShape(
                `
            ...ZLL....
            .....L....
            ....ZL....
            ..........
            ..........
            ..........
            `
            );
        });

        test("will rotate right when (0,0) and (1,1) are occupied", () => {
            let board = Board.fromString(
                `
            ...Z......
            ....Z.....
            ..........
            ..........
            ..........
            ..........
            `
            );
            board = setupFallingShape(board, Tetromino.ARIKA_L.rotateLeft().rotateLeft(), 0, 3);

            expect(board.toString(), "Incorrect setup").to.equalShape(
                `
            ...Z......
            ....ZL....
            ...LLL....
            ..........
            ..........
            ..........
            `
            );

            board.rotateLeft();

            expect(board.toString(), "Rotation failed").to.equalShape(
                `
            ...ZLL....
            ....ZL....
            .....L....
            ..........
            ..........
            ..........
            `
            );
        });
    });
});
