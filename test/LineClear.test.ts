import { describe, test } from "vitest";
import { Board } from "../src/Board";
import { setupFallingShape } from "./testUtils";
import { Tetromino } from "../src/Tetromino";
import { expect } from "chai";
import { LineClearPublisher } from "../src/Publishers/LineClearPublisher";
import * as chaiModule from "chai";
import spies from "chai-spies";
import { LineClearSubscriber } from "../src/Subscribers/LineClearSubscriber";
const chai = chaiModule.use(spies);

describe("Line clear is ", () => {
    test("performed when the falling piece stops on the bottom", () => {
        let board = Board.fromString(
            `
        ..........    
        ..........    
        ..........    
        ..........    
        ..........    
        ZZZ...ZZZZ    
        `
        );
        board = setupFallingShape(board, Tetromino.ARIKA_T.rotateLeft().rotateLeft(), 2, 3);

        expect(board.toString(), "Incorrect setup").to.equalShape(
            `
        ..........    
        ..........    
        ..........    
        ....T.....    
        ...TTT....    
        ZZZ...ZZZZ    
        `
        );

        board.tick();

        expect(board.toString(), "First tick").to.equalShape(
            `
        ..........    
        ..........    
        ..........    
        ..........    
        ....T.....    
        ZZZTTTZZZZ    
        `
        );

        board.tick();

        expect(board.toString(), "Line clear failed").to.equalShape(
            `
        ..........    
        ..........    
        ..........    
        ..........    
        ..........    
        ....T.....       
        `
        );
    });

    test("performed when the falling piece stops on other pieces", () => {
        let board = Board.fromString(
            `
        ..........    
        ..........    
        ..........    
        ..........    
        ZZZ...ZZZZ    
        ZZZ.Z.ZZZZ    
        `
        );
        board = setupFallingShape(board, Tetromino.ARIKA_T.rotateLeft().rotateLeft(), 1, 3);

        expect(board.toString(), "Incorrect setup").to.equalShape(
            `
        ..........    
        ..........    
        ....T.....    
        ...TTT....    
        ZZZ...ZZZZ    
        ZZZ.Z.ZZZZ    
        `
        );

        board.tick();

        expect(board.toString(), "First tick").to.equalShape(
            `
        ..........    
        ..........    
        ..........    
        ....T.....    
        ZZZTTTZZZZ    
        ZZZ.Z.ZZZZ    
        `
        );

        board.tick();

        expect(board.toString(), "Line clear failed").to.equalShape(
            `
        ..........    
        ..........    
        ..........    
        ..........    
        ....T.....    
        ZZZ.Z.ZZZZ    
        `
        );

        board.tick();
    });

    test("not performed when the piece is still moving", () => {
        let board = Board.fromString(
            `
        ..........    
        ..........    
        ..........    
        ..........    
        ZZZ...ZZZZ    
        ZZZ...ZZZZ    
        `
        );
        board = setupFallingShape(board, Tetromino.ARIKA_T.rotateLeft().rotateLeft(), 1, 3);

        expect(board.toString(), "Incorrect setup").to.equalShape(
            `
        ..........    
        ..........    
        ....T.....    
        ...TTT....    
        ZZZ...ZZZZ    
        ZZZ...ZZZZ    
        `
        );

        board.tick();

        expect(board.toString(), "First tick").to.equalShape(
            `
        ..........    
        ..........    
        ..........    
        ....T.....    
        ZZZTTTZZZZ    
        ZZZ...ZZZZ    
        `
        );

        board.tick();

        expect(board.toString(), "First tick").to.equalShape(
            `
        ..........    
        ..........    
        ..........    
        ..........    
        ZZZ.T.ZZZZ    
        ZZZTTTZZZZ    
        `
        );
    });

    describe("on two lines at the same time ", () => {
        test("when the lines are next to each other", () => {
            let board = Board.fromString(
                `   
                ..........
                ..........
                ..........
                ..........
                .ZZZZZZZZZ
                .ZZZZZZZZZ
                `
            );
            board = setupFallingShape(board, Tetromino.ARIKA_I.rotateLeft(), 1, -2);

            expect(board.toString(), "Incorrect setup").to.equalShape(
                `   
                ..........
                I.........
                I.........
                I.........
                IZZZZZZZZZ
                .ZZZZZZZZZ
                `
            );

            board.tick();
            board.tick();

            expect(board.toString(), "Line clear failed").to.equalShape(
                `
                ..........
                ..........
                ..........
                ..........
                I.........
                I.........
                `
            );
        });

        test("when the lines are not next to each other", () => {
            let board = Board.fromString(
                `   
                ..........
                ..........
                ..........
                .ZZZZZZZZZ
                .........Z
                .ZZZZZZZZZ
                `
            );
            board = setupFallingShape(board, Tetromino.ARIKA_I.rotateLeft(), 1, -2);

            expect(board.toString(), "Incorrect setup").to.equalShape(
                `   
                ..........
                I.........
                I.........
                IZZZZZZZZZ
                I........Z
                .ZZZZZZZZZ
                `
            );

            board.tick();
            board.tick();

            expect(board.toString(), "Line clear failed").to.equalShape(
                `
                ..........
                ..........
                ..........
                ..........
                I.........
                I........Z
                `
            );
        });
    });

    describe("published ", () => {
        let board = Board.fromString(
            `
        ..........    
        ..........    
        ..........    
        ..........    
        ..........    
        ZZZ...ZZZZ    
        `
        );
        board = setupFallingShape(board, Tetromino.ARIKA_T.rotateLeft().rotateLeft(), 2, 3);

        const sub = new LineClearSubscriber("testsub");
        board.lineClearPublisher.attach(sub);

        test("when clearing one line", () => {
            const publishSpy = chai.spy.on(board.lineClearPublisher, "publish");
            const receiveSpy = chai.spy.on(sub, "receive");

            expect(board.toString(), "Incorrect setup").to.equalShape(
                `
        ..........    
        ..........    
        ..........    
        ....T.....    
        ...TTT....    
        ZZZ...ZZZZ    
        `
            );

            board.tick();

            expect(board.toString(), "First tick").to.equalShape(
                `
        ..........    
        ..........    
        ..........    
        ..........    
        ....T.....    
        ZZZTTTZZZZ    
        `
            );

            board.tick();

            expect(publishSpy).to.have.been.called.with(1);
            expect(receiveSpy).to.have.been.called.with(1);
        });
    });
});
