import { expect } from "chai";
import { describe, beforeEach, test } from "vitest";
import { Board } from "../src/Board";
import { Tetromino } from "../src/Tetromino";
import { setupFallingShape } from "./testUtils";

describe("Arika L respects the center column rule and ", () => {
    describe("will not rotate when shape position (0,1) is occupied ", () => {
        let board: Board;

        beforeEach(() => {
            board = Board.fromString(
                `
                    ....Z.....
                    ..........
                    ..........
                    ..........
                    ..........
                    ..........
                    `
            );
        });

        test("when J is in initial rotation and rotating left", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L, 0, 3);

            const expected = `
                ....Z.....
                ...LLL....
                ...L......
                ..........
                ..........
                ..........
                `;

            expect(board.toString()).to.equalShape(expected);

            board.rotateLeft();
            board.rotateLeft();

            expect(board.toString()).to.equalShape(expected);
        });

        test("when J is in initial rotation and rotating right", () => {
            board = setupFallingShape(board, Tetromino.ARIKA_L, 0, 3);

            const expected = `
                    ....Z.....
                    ...LLL....
                    ...L......
                    ..........
                    ..........
                    ..........
                    `;

            expect(board.toString()).to.equalShape(expected);

            board.rotateRight();
            board.rotateRight();

            expect(board.toString()).to.equalShape(expected);
        });

        //     test("when J is rotated 180 and rotating left", () => {
        //         board = setupFallingShape(board, Tetromino.ARIKA_J.rotateLeft().rotateLeft(), 0, 3);

        //         const expected = `
        //             ....Z.....
        //             ...J......
        //             ...JJJ....
        //             ..........
        //             ..........
        //             ..........
        //             `;

        //         expect(board.toString()).to.equalShape(expected);

        //         board.rotateLeft();
        //         board.rotateLeft();

        //         expect(board.toString()).to.equalShape(expected);
        //     });

        //     test("when J is rotated 180 and rotating right", () => {
        //         board = setupFallingShape(board, Tetromino.ARIKA_J.rotateLeft().rotateLeft(), 0, 3);

        //         const expected = `
        //             ....Z.....
        //             ...J......
        //             ...JJJ....
        //             ..........
        //             ..........
        //             ..........
        //             `;

        //         expect(board.toString()).to.equalShape(expected);

        //         board.rotateRight();
        //         board.rotateRight();

        //         expect(board.toString()).to.equalShape(expected);
        //     });
        // });

        // describe("will not rotate when shape position (1,1) is occupied ", () => {
        //     let board: Board;

        //     beforeEach(() => {
        //         board = Board.fromString(
        //             `
        //                 ..........
        //                 ....Z.....
        //                 ..........
        //                 ..........
        //                 ..........
        //                 ..........
        //                 `
        //         );
        //     });

        //     test("when J is rotated 180 and rotating left", () => {
        //         board = setupFallingShape(board, Tetromino.ARIKA_J.rotateLeft().rotateLeft(), 0, 3);

        //         const expected = `
        //             ..........
        //             ...JZ.....
        //             ...JJJ....
        //             ..........
        //             ..........
        //             ..........
        //             `;

        //         expect(board.toString()).to.equalShape(expected);

        //         board.rotateLeft();
        //         board.rotateLeft();

        //         expect(board.toString()).to.equalShape(expected);
        //     });

        //     test("when J is rotated 180 and rotating right", () => {
        //         board = setupFallingShape(board, Tetromino.ARIKA_J.rotateLeft().rotateLeft(), 0, 3);

        //         const expected = `
        //             ..........
        //             ...JZ.....
        //             ...JJJ....
        //             ..........
        //             ..........
        //             ..........
        //             `;

        //         expect(board.toString()).to.equalShape(expected);

        //         board.rotateRight();
        //         board.rotateRight();

        //         expect(board.toString()).to.equalShape(expected);
        //     });
        // });

        // describe("will not rotate when shape position (2,1) is occupied ", () => {
        //     let board: Board;

        //     beforeEach(() => {
        //         board = Board.fromString(
        //             `
        //                 ..........
        //                 ..........
        //                 ....Z.....
        //                 ..........
        //                 ..........
        //                 ..........
        //                 `
        //         );
        //     });

        //     test("when J is in initial rotation and rotating left", () => {
        //         board = setupFallingShape(board, Tetromino.ARIKA_J, 0, 3);

        //         const expected = `
        //             ..........
        //             ...JJJ....
        //             ....ZJ....
        //             ..........
        //             ..........
        //             ..........
        //             `;

        //         expect(board.toString()).to.equalShape(expected);

        //         board.rotateLeft();
        //         board.rotateLeft();

        //         expect(board.toString()).to.equalShape(expected);
        //     });

        //     test("when J is in initial rotation and rotating right", () => {
        //         board = setupFallingShape(board, Tetromino.ARIKA_J, 0, 3);

        //         const expected = `
        //             ..........
        //             ...JJJ....
        //             ....ZJ....
        //             ..........
        //             ..........
        //             ..........
        //             `;

        //         expect(board.toString()).to.equalShape(expected);

        //         board.rotateRight();
        //         board.rotateRight();

        //         expect(board.toString()).to.equalShape(expected);
        //     });
    });
});
